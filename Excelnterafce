import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.*;
import java.util.*;
import java.io.*;

public class ExcelInterface 
{
	Table table;
    public static void main(String[] args) 
    {
    	ExcelInterface eI = new ExcelInterface();
    	//eI.WriteFile();
    	eI.ReadDefinition();
    	eI.ReadFile();
    }
    
    ExcelInterface()
    {
    	table = new Table();
    }

    public void ReadFile() 
    {
        try
        {
            FileInputStream file = new FileInputStream(new File("data.xlsx"));
 
            //Create Workbook instance holding reference to .xlsx file
            XSSFWorkbook workbook = new XSSFWorkbook(file);
 
            //Get first/desired sheet from the workbook
            XSSFSheet sheet = workbook.getSheetAt(0);
 
            //Iterate through each rows one by one
            Iterator<Row> rowIterator = sheet.iterator();
            while (rowIterator.hasNext()) 
            {
                Row row = rowIterator.next();
                //For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();
                Record rec = new Record();
                while (cellIterator.hasNext()) 
                {
                    Cell cell = cellIterator.next();
                    Field field = new Field();
                    //Check the cell type and format accordingly
                    switch (cell.getCellType()) 
                    {
                        case Cell.CELL_TYPE_NUMERIC:
                        {
                            //System.out.print(cell.getNumericCellValue() + "\t");
                            field.SetValue(cell.getNumericCellValue() + "\t");
                            break;
                        }
                        case Cell.CELL_TYPE_STRING:
                        {
                            //System.out.print(cell.getStringCellValue() + "\t");
                            field.SetValue(cell.getStringCellValue() + "\t");
                           break;
                        }
                    }
                    rec.Add(field);
                }
                System.out.println("");
                table.Add(rec);
            }
            file.close();
    		table.Print();
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }

    public void ReadDefinition() 
    {
        try
        {
            FileInputStream file = new FileInputStream(new File("design.xlsx"));
 
            //Create Workbook instance holding reference to .xlsx file
            XSSFWorkbook workbook = new XSSFWorkbook(file);
 
            //Get first/desired sheet from the workbook
            XSSFSheet sheet = workbook.getSheetAt(0);
 
            //Iterate through each rows one by one
            Iterator<Row> rowIterator = sheet.iterator();
            while (rowIterator.hasNext()) 
            {
                Row row = rowIterator.next();
                //For each row, iterate through all the columns
                Iterator<Cell> cellIterator = row.cellIterator();
                Record rec = new Record();
                while (cellIterator.hasNext()) 
                {
                    Cell cell = cellIterator.next();
                    Field field = new Field();
                    //Check the cell type and format accordingly
                    switch (cell.getCellType()) 
                    {
                        case Cell.CELL_TYPE_NUMERIC:
                        {
                            //System.out.print(cell.getNumericCellValue() + "\t");
                            field.SetValue(cell.getNumericCellValue() + "\t");
                            break;
                        }
                        case Cell.CELL_TYPE_STRING:
                        {
                            //System.out.print(cell.getStringCellValue() + "\t");
                            field.SetValue(cell.getStringCellValue() + "\t");
                           break;
                        }
                    }
                    rec.Add(field);
                }
                System.out.println("");
                table.AddDefn(rec);
            }
            file.close();
    		table.PrintDefinition();
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }
   
    
  public void WriteFile() 
  {
      //Blank workbook
      XSSFWorkbook workbook = new XSSFWorkbook(); 
       
      //Create a blank sheet
      //XSSFSheet sheet = workbook.createSheet("Employee Data");
      XSSFSheet sheet = workbook.createSheet("Employee Definition");
             
      //This data needs to be written (Object[])
      Map<String, Object[]> data = new TreeMap<String, Object[]>();
//      data.put("1", new Object[] {"ID", "NAME", "LASTNAME"});
//      data.put("2", new Object[] {1, "Amit", "Shukla"});
//      data.put("3", new Object[] {2, "Lokesh", "Gupta"});
//      data.put("4", new Object[] {3, "John", "Adwards"});
//      data.put("5", new Object[] {4, "Brian", "Schultz"});
      data.put("1", new Object[] {"ID", "String"});
      data.put("2", new Object[] {"FIRST NAME", "String"});
      data.put("3", new Object[] {"LAST NAME", "String"});
        
      //Iterate over data and write to sheet
      Set<String> keyset = data.keySet();
      int rownum = 0;
      for (String key : keyset)
      {
          Row row = sheet.createRow(rownum++);
          Object [] objArr = data.get(key);
          int cellnum = 0;
          for (Object obj : objArr)
          {
             Cell cell = row.createCell(cellnum++);
             if(obj instanceof String)
                  cell.setCellValue((String)obj);
              else if(obj instanceof Integer)
                  cell.setCellValue((Integer)obj);
          }
      }
      try
      {
          //Write the workbook in file system
          //FileOutputStream out = new FileOutputStream(new File("howtodoinjava_demo.xlsx"));
          FileOutputStream out = new FileOutputStream(new File("design.xlsx"));
          //FileOutputStream out = new FileOutputStream(new File("data.xlsx"));
          workbook.write(out);
          out.close();
          System.out.println("Design.xslx written successfully on disk.");
          //System.out.println("Data.xlsx written successfully on disk.");
      } 
      catch (Exception e) 
      {
          e.printStackTrace();
      }
  }

}
